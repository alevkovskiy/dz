package TimedBuildings

import java.util.concurrent.CopyOnWriteArrayList
import kotlin.concurrent.thread
import GameHandler.*

interface TimedBuilding {
    val name: String
    val maxVisitors: Int
    val currentVisitors: MutableList<Visit>
    val lock: Any

    var player: Player?
    var bot: Bot?

    fun runBuildingLoop()
    fun tryVisit(visitor: Visitor, service: Service): Boolean
    fun status(): String
    fun availableServices(): List<Service>
}

data class Visitor(val name: String, val isPlayer: Boolean = false)

data class Visit(
    val visitor: Visitor,
    val service: Service,
    val endTime: Long
)

data class Service(
    val name: String,
    val bonusType: BonusType,
    val bonusValue: Int,
    val durationMs: Long
)

enum class BonusType {
    DAMAGE_KNIGHT, DAMAGE_ASSASSIN, ARMOR_ALL, DAMAGE_ALL, NONE
}

class LancelotCamp: TimedBuilding {
    override val name = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ª–∞–≥–µ—Ä—å –õ–∞–Ω—Ü–µ–ª–æ—Ç–∞"
    override val maxVisitors = 5
    override val currentVisitors = CopyOnWriteArrayList<Visit>()
    override val lock = Any()


    override var player: Player? = null
    override var bot: Bot? = null

    private val services = listOf(
        Service("–ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", BonusType.DAMAGE_KNIGHT, 1, 12 * 100),
        Service("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –∫—É—Ä—Å", BonusType.DAMAGE_KNIGHT, 8, 3 * 24 * 100)
    )

    init { thread(start = true) { runBuildingLoop() } }

    override fun runBuildingLoop() {
        while (true) {
            Thread.sleep(100)
            val now = System.currentTimeMillis()
            currentVisitors.removeIf {
                if (it.endTime <= now) {
                    println("‚öîÔ∏è ${it.visitor.name} –∑–∞–≤–µ—Ä—à–∏–ª ${it.service.name} –≤ $name")

                    if (it.visitor.isPlayer) {
                        player?.applyBonus(it.service)
                    } else {
                        bot?.applyBonus(it.service)
                    }

                    true
                } else false
            }
        }
    }

    override fun tryVisit(visitor: Visitor, service: Service): Boolean {
        synchronized(lock) {
            if (currentVisitors.size >= maxVisitors) return false
            currentVisitors.add(Visit(visitor, service, System.currentTimeMillis() + service.durationMs))
        }
        return true
    }


    override fun availableServices() = services

    override fun status(): String = buildString {
        appendLine("üèïÔ∏è $name ‚Äî ${currentVisitors.size}/$maxVisitors")

        currentVisitors.forEach {
            val left = (it.endTime - System.currentTimeMillis()).coerceAtLeast(0)
            appendLine("üïí ${it.visitor.name}: ${it.service.name} (${left}–º—Å –æ—Å—Ç–∞–ª–æ—Å—å)")
        }
    }
}

class CreedBrotherhood: TimedBuilding {
    override val name = "–ë—Ä–∞—Ç—Å—Ç–≤–æ –ö—Ä–µ–¥–æ"
    override val maxVisitors = 5
    override val currentVisitors = CopyOnWriteArrayList<Visit>()
    override val lock = Any()


    override var player: Player? = null
    override var bot: Bot? = null

    private val services = listOf(
        Service("–û–±—ã—á–Ω–∞—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∞", BonusType.DAMAGE_ASSASSIN, 1, 12 * 100),
        Service("–°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏", BonusType.DAMAGE_ASSASSIN, 7, 3 * 24 * 100)
    )

    init { thread(start = true) { runBuildingLoop() } }

    override fun runBuildingLoop() {
        while (true) {
            Thread.sleep(100)
            val now = System.currentTimeMillis()
            currentVisitors.removeIf {
                if (it.endTime <= now) {
                    println("üó°Ô∏è ${it.visitor.name} –∑–∞–≤–µ—Ä—à–∏–ª ${it.service.name} –≤ $name")
                    true
                } else false
            }
        }
    }

    override fun tryVisit(visitor: Visitor, service: Service): Boolean {
        synchronized(lock) {
            if (currentVisitors.size >= maxVisitors) return false
            currentVisitors.add(Visit(visitor, service, System.currentTimeMillis() + service.durationMs))
        }
        return true
    }

    override fun availableServices() = services

    override fun status(): String = buildString {
        appendLine("üïµÔ∏è‚Äç‚ôÇÔ∏è $name ‚Äî ${currentVisitors.size}/$maxVisitors")
        currentVisitors.forEach {
            val left = (it.endTime - System.currentTimeMillis()).coerceAtLeast(0)
            appendLine("üïí ${it.visitor.name}: ${it.service.name} (${left}–º—Å –æ—Å—Ç–∞–ª–æ—Å—å)")
        }
    }
}

class DwarfForge: TimedBuilding {
    override val name = "–ö—É–∑–Ω–∏—Ü–∞ –î–≤–∞—Ä—Ñ–∞"
    override val maxVisitors = 4
    override val currentVisitors = CopyOnWriteArrayList<Visit>()
    override val lock = Any()


    override var player: Player? = null
    override var bot: Bot? = null

    private val services = listOf(
        Service("–û–±–Ω–æ–≤–∏—Ç—å –æ—Ä—É–∂–∏–µ", BonusType.DAMAGE_ALL, 3, 2 * 24 * 100),
        Service("–û–±–Ω–æ–≤–∏—Ç—å –±—Ä–æ–Ω—é", BonusType.ARMOR_ALL, 5, 4 * 24 * 100)
    )

    init { thread(start = true) { runBuildingLoop() } }

    override fun runBuildingLoop() {
        while (true) {
            Thread.sleep(100)
            val now = System.currentTimeMillis()
            currentVisitors.removeIf {
                if (it.endTime <= now) {
                    println("üõ†Ô∏è ${it.visitor.name} –∑–∞–≤–µ—Ä—à–∏–ª ${it.service.name} –≤ $name")
                    true
                } else false
            }
        }
    }

    override fun tryVisit(visitor: Visitor, service: Service): Boolean {
        synchronized(lock) {
            if (currentVisitors.size >= maxVisitors) return false
            currentVisitors.add(Visit(visitor, service, System.currentTimeMillis() + service.durationMs))
        }
        return true
    }

    override fun availableServices() = services

    override fun status(): String = buildString {
        appendLine("üß± $name ‚Äî ${currentVisitors.size}/$maxVisitors")
        currentVisitors.forEach {
            val left = (it.endTime - System.currentTimeMillis()).coerceAtLeast(0)
            appendLine("üïí ${it.visitor.name}: ${it.service.name} (${left}–º—Å –æ—Å—Ç–∞–ª–æ—Å—å)")
        }
    }
}
